name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  secrets-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check required secrets
        run: |
          echo "Checking required secrets..."
          
          # Check Supabase secrets (these are causing your test failures)
          [ -z "${{ secrets.SUPABASE_URL }}" ] && echo "❌ SUPABASE_URL is missing" || echo "✅ SUPABASE_URL is set"
          [ -z "${{ secrets.SUPABASE_USER_KEY }}" ] && echo "❌ SUPABASE_USER_KEY is missing" || echo "✅ SUPABASE_USER_KEY is set"
          [ -z "${{ secrets.SUPABASE_ADMIN_KEY }}" ] && echo "❌ SUPABASE_ADMIN_KEY is missing" || echo "✅ SUPABASE_ADMIN_KEY is set"
          [ -z "${{ secrets.SUPABASE_JWT_SECRET }}" ] && echo "❌ SUPABASE_JWT_SECRET is missing" || echo "✅ SUPABASE_JWT_SECRET is set"
          
          # Check database secrets
          [ -z "${{ secrets.SUPABASE_PSQL_USER }}" ] && echo "❌ SUPABASE_PSQL_USER is missing" || echo "✅ SUPABASE_PSQL_USER is set"
          [ -z "${{ secrets.SUPABASE_PSQL_PASSWORD }}" ] && echo "❌ SUPABASE_PSQL_PASSWORD is missing" || echo "✅ SUPABASE_PSQL_PASSWORD is set"
          [ -z "${{ secrets.SUPABASE_PSQL_HOST }}" ] && echo "❌ SUPABASE_PSQL_HOST is missing" || echo "✅ SUPABASE_PSQL_HOST is set"
          [ -z "${{ secrets.SUPABASE_PSQL_PORT }}" ] && echo "❌ SUPABASE_PSQL_PORT is missing" || echo "✅ SUPABASE_PSQL_PORT is set"
          [ -z "${{ secrets.SUPABASE_PSQL_DBNAME }}" ] && echo "❌ SUPABASE_PSQL_DBNAME is missing" || echo "✅ SUPABASE_PSQL_DBNAME is set"
          
          # Check GitHub OAuth secrets
          [ -z "${{ secrets.NEXT_GITHUB_CLIENT_ID }}" ] && echo "❌ NEXT_GITHUB_CLIENT_ID is missing" || echo "✅ NEXT_GITHUB_CLIENT_ID is set"
          [ -z "${{ secrets.NEXT_GITHUB_CLIENT_SECRET }}" ] && echo "❌ NEXT_GITHUB_CLIENT_SECRET is missing" || echo "✅ NEXT_GITHUB_CLIENT_SECRET is set"
          
          # Fail if any required secret is missing
          if [ -z "${{ secrets.SUPABASE_URL }}" ] || [ -z "${{ secrets.SUPABASE_USER_KEY }}" ]; then
            echo "Required secrets missing! Please add them in GitHub repository settings."
            exit 1
          fi
  backend-tests:
    runs-on: ubuntu-latest
    env:
      NEXT_GITHUB_CLIENT_ID: ${{ secrets.NEXT_GITHUB_CLIENT_ID }}
      NEXT_GITHUB_CLIENT_SECRET: ${{ secrets.NEXT_GITHUB_CLIENT_SECRET }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_USER_KEY: ${{ secrets.SUPABASE_USER_KEY }}
      SUPABASE_ADMIN_KEY: ${{ secrets.SUPABASE_ADMIN_KEY }}
      SUPABASE_JWT_SECRET: ${{ secrets.SUPABASE_JWT_SECRET }}
      SUPABASE_PSQL_USER: ${{ secrets.SUPABASE_PSQL_USER }}
      SUPABASE_PSQL_PASSWORD: ${{ secrets.SUPABASE_PSQL_PASSWORD }}
      SUPABASE_PSQL_HOST: ${{ secrets.SUPABASE_PSQL_HOST }}
      SUPABASE_PSQL_PORT: ${{ secrets.SUPABASE_PSQL_PORT }}
      SUPABASE_PSQL_DBNAME: ${{ secrets.SUPABASE_PSQL_DBNAME }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install PDM
      run: |
        curl -sSL https://pdm.fming.dev/install-pdm.py | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        pdm install

    - name: Run backend tests with coverage
      working-directory: ./backend
      run: |
        pdm run pytest --cov=. --cov-report=xml

    - name: Upload backend coverage
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend/coverage.xml

  frontend-tests:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_GITHUB_CLIENT_ID: ${{ secrets.NEXT_GITHUB_CLIENT_ID }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install chromium --with-deps

    - name: Install PDM for backend
      run: |
        curl -sSL https://pdm.fming.dev/install-pdm.py | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Start backend for e2e tests
      working-directory: ./backend
      run: |
        echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env
        echo "SUPABASE_USER_KEY=${{ secrets.SUPABASE_USER_KEY }}" >> .env
        echo "SUPABASE_ADMIN_KEY=${{ secrets.SUPABASE_ADMIN_KEY }}" >> .env
        echo "SUPABASE_JWT_SECRET=${{ secrets.SUPABASE_JWT_SECRET }}" >> .env
        echo "SUPABASE_PSQL_USER=${{ secrets.SUPABASE_PSQL_USER }}" >> .env
        echo "SUPABASE_PSQL_PASSWORD=${{ secrets.SUPABASE_PSQL_PASSWORD }}" >> .env
        echo "SUPABASE_PSQL_HOST=${{ secrets.SUPABASE_PSQL_HOST }}" >> .env
        echo "SUPABASE_PSQL_PORT=${{ secrets.SUPABASE_PSQL_PORT }}" >> .env
        echo "SUPABASE_PSQL_DBNAME=${{ secrets.SUPABASE_PSQL_DBNAME }}" >> .env
        echo "NEXT_GITHUB_CLIENT_ID=${{ secrets.NEXT_GITHUB_CLIENT_ID }}" >> .env
        echo "NEXT_GITHUB_CLIENT_SECRET=${{ secrets.NEXT_GITHUB_CLIENT_SECRET }}" >> .env
    
        pdm install
        pdm run flask run &
        echo "Waiting for backend to start..."
        sleep 15

    - name: Run frontend e2e tests with coverage
      working-directory: ./frontend
      run: |
        npm run dev & # Start Next.js in background
        sleep 10 # Wait for Next.js to start
        npm run test:e2e:coverage

    - name: Upload frontend test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-test-results
        path: |
          frontend/test-results
          frontend/playwright-report

    - name: Upload Playwright report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  build:
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        pattern: '*-test-results'
        merge-multiple: true

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: backend-coverage
        path: coverage-reports/backend

    - name: Generate combined coverage report
      run: |
        echo "Coverage Reports:" > coverage-summary.txt
        echo "==================" >> coverage-summary.txt
        echo "Backend Coverage:" >> coverage-summary.txt
        cat coverage-reports/backend/coverage.xml >> coverage-summary.txt
        echo "Frontend Coverage:" >> coverage-summary.txt
        find . -name "test-results.json" -exec cat {} \; >> coverage-summary.txt

    - name: Build success
      run: echo "All tests passed and build successful!"
